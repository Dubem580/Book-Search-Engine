{"version":3,"sources":["utils/auth.js","utils/mutations.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","SignupForm","useMutation","addUser","useState","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","handleInputChange","event","target","name","value","handleFormSubmit","a","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","Auth","login","console","error","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","disabled","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Container","fluid","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","className","loggedIn","onClick","logout","Modal","size","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Title","Item","eventKey","Body","Content","Pane","handleModalClose","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","saveBook","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","bookIdArr","length","fetch","response","ok","Error","json","items","bookData","map","book","authors","volumeInfo","title","description","image","imageLinks","thumbnail","handleSaveBook","bookToSave","find","input","log","Jumbotron","Row","Col","xs","md","e","CardColumns","Card","key","border","Img","src","alt","Text","some","GET_ME","SavedBooks","removeBook","useQuery","loading","userData","me","handleDeleteBook","savedBooks","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c084d02.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import gql from \"graphql-tag\"\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n        bookCount\n        savedBooks {\n          bookId\n          title\n          description\n          authors\n          image\n          link\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n        bookCount\n        savedBooks {\n          bookId\n          title\n          description\n          authors\n          image\n          link\n        }\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\n  mutation saveBook($input: bookInput!) {\n    saveBook(input: $input) {\n      _id\n      username\n      email\n      savedBooks {\n        bookId\n        authors\n        image\n        description\n        title\n        link\n      }\n    }\n  }\n`;\n\nexport const REMOVE_BOOK = gql`\n  mutation removeBook($bookId: String!) {\n    removeBook(bookId: $bookId) {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        bookId\n        authors\n        image\n        description\n        title\n        link\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n// import { createUser } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\nimport { useMutation } from '@apollo/react-hooks';\n\nconst SignupForm = () => {\n  const [addUser] = useMutation(ADD_USER);\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData }\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true)\n    }\n\n    //   if (!response.ok) {\n    //     throw new Error('something went wrong!');\n    //   }\n\n    //   const { token, user } = await response.json();\n    //   console.log(user);\n    //   Auth.login(token);\n    // } catch (err) {\n    //   console.error(err);\n    //   setShowAlert(true);\n    // }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/react-hooks'\n\nconst LoginForm = () => {\n  const [login] = useMutation(LOGIN_USER)\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData }\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n      setShowAlert(true)\n    }\n\n    // try {\n    //   const response = await loginUser(userFormData);\n\n    //   if (!response.ok) {\n    //     throw new Error('something went wrong!');\n    //   }\n\n    //   const { token, user } = await response.json();\n    //   console.log(user);\n    //   Auth.login(token);\n    // } catch (err) {\n    //   console.error(err);\n    //   setShowAlert(true);\n    // }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nimport { useMutation } from '@apollo/react-hooks';\nimport { SAVE_BOOK } from '../utils/mutations';\n\nconst SearchBooks = () => {\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n\n    try {\n      const { data } = await saveBook({\n        variables: { input: bookToSave }\n      });\n\n      if (error) {\n        throw new Error('something went wrong!');\n      }\n\n      console.log(data);\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;","// route to get logged in user's info (needs the token)\nexport const GET_ME = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import gql from \"graphql-tag\";\n\nexport const GET_ME = gql`\n    {\n        me {\n            _id\n            username\n            email\n            bookCount\n            savedBooks {\n                bookId\n                authors\n                title\n                description\n                image\n                link\n            }\n        }\n    }\n`;","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\n// import { getMe, deleteBook } from '../utils/API';\nimport Auth from \"../utils/auth\";\nimport { removeBookId } from \"../utils/localStorage\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\nimport { GET_ME } from \"../utils/queries\";\n\nconst SavedBooks = () => {\n  // const [userData, setUserData] = useState({});\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n  const { loading, data } = useQuery(GET_ME);\n  const userData = data?.me || {};\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeBook({\n        variables: { bookId },\n      });\n\n      console.log(data);\n\n      if (error) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? \"book\" : \"books\"\n            }:`\n            : \"You have no saved books!\"}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;","import React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\n\nconst client = new ApolloClient({\n  request: operation => {\n    const token = localStorage.getItem('id_token');\n\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={SearchBooks} />\n            <Route exact path='/saved' component={SavedBooks} />\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}